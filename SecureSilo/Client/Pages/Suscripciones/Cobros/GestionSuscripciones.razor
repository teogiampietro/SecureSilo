@page "/suscripcion/{UserName}/gestionar"
@inject HttpClient Http
@inject IJSRuntime JS

@attribute [Authorize]

<div class="container">
    <br />
    @if (response.Suscripciones == null)
    {
        <text> Cargando </text>
    }
    else if (response.Suscripciones.Count == 0 && response.User != null)
    {
        <EditForm Model="@response">
            <div class="row">
                <div class="col-sm-6">
                    <h1>Gestion de suscripciones</h1>
                </div>
                <div class="col-sm-2">
                    <a class="btn btn-success" href="suscripcion/@response.User.Id/nuevo-cobro">Solicitud de un nuevo pago</a>
                </div>
                <div class="col-sm-2">
                    <a class="btn btn-success" @onclick="(() => PagoAnual(response.User.Id))">Generar pago anual</a>
                </div>
                @if (response.User.Active)
                {
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-danger" @onclick="(() => BloqueoUsuario(false))">Bloquear este usuario</button>
                    </div>
                }
                else
                {
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-success" @onclick="(() => BloqueoUsuario(true))">Habilitar este usuario</button>
                    </div>
                }

            </div>
            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Email usuario:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@response.User.Email" />
                            <ValidationMessage For="@(() => response.User.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <label>Nombre usuario:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@response.User.UserName" />
                        <ValidationMessage For="@(() => response.User.UserName)" />
                    </div>
                </div>
            </div>
        </EditForm>

        <table class="table">
            <thead>
                <tr>
                    <th>N°</th>
                    <th>Fecha emision</th>
                    <th>Fecha pago</th>
                    <th>Categoria</th>
                    <th>Forma de pago</th>
                    <th>Estado</th>
                    <th>Autorizado</th>
                    <th>Total</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    }
    else
    {
        <EditForm Model="@response">
            <div class="row">
                <div class="col-sm-6">
                    <h1>Gestion de suscripciones</h1>
                </div> <div class="col-sm-2">
                    <a class="btn btn-success" href="suscripcion/@response.User.Id/nuevo-cobro">Solicitud de un nuevo pago</a>
                </div>
                <div class="col-sm-2">
                    <a class="btn btn-success" @onclick="(() => PagoAnual(response.User.Id))">Generar pago anual</a>
                </div>
                @if (response.User.Active)
                {
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-danger" @onclick="(() => BloqueoUsuario(false))">Bloquear este usuario</button>
                    </div>
                }
                else
                {
                    <div class="col-sm-2">
                        <button type="button" class="btn btn-success" @onclick="(() => BloqueoUsuario(true))">Habilitar este usuario</button>
                    </div>
                }
            </div>


            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label>Email usuario:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@response.User.Email" />
                            <ValidationMessage For="@(() => response.User.Email)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <label>Nombre usuario:</label>
                    <div>
                        <InputText class="form-control" @bind-Value="@response.User.UserName" />
                        <ValidationMessage For="@(() => response.User.UserName)" />
                    </div>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>N°</th>
                        <th>Fecha emision</th>
                        <th>Fecha pago</th>
                        <th>Categoria</th>
                        <th>Forma de pago</th>
                        <th>Estado</th>
                        <th>Autorizado</th>
                        <th>Total</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var response in response.Suscripciones)
                    {
                        <tr>
                            <td>@response.Id</td>
                            @if (response.FechaEmision == DateTime.MinValue)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td> @response.FechaEmision.ToString("dd/MM/yyyy")</td>
                            }
                            @if (response.FechaEmision == response.FechaPago)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@response.FechaPago.ToString("dd/MM/yyyy")</td>
                            }
                            <td> @response.Categoria.Descripcion</td>
                            @if (response.FormaDePagoId != 1)
                            {
                                <td> @response.FormaDePago.Descripcion</td>
                            }
                            else
                            {
                                <td></td>
                            }
                            <td> @response.Estado</td>
                            @if (@response.Verificado)
                            {
                                <td> @response.Verificado</td>
                            }
                            else
                            {
                                <td></td>
                            }

                            <td> $@response.Total</td>
                            @if (!response.Verificado)
                            {
                                <td> <button class="btn btn-danger" @onclick="@(() => AnularSuscripcion(response.Id))">X</button></td>
                            }
                            else
                            {
                                <td></td>
                            }
                            @if (response.Pagado && !response.Verificado)
                            {
                                <td> <button class="btn btn-success" @onclick="@(() => VerificarPago(response))">A</button></td>
                            }
                            else
                            {
                                <td></td>
                            }

                        </tr>
                    }
                </tbody>
            </table>
        </EditForm>
    }
</div>

@code
{
    [Parameter] public string UserName { get; set; }

    private ResponseSuscripcion response { get; set; } = new ResponseSuscripcion();

    protected override async Task OnInitializedAsync()
    {
        await CargarSuscripciones();
    }
    async Task CargarSuscripciones()
    {
        response = await Http.GetFromJsonAsync<ResponseSuscripcion>($"Suscripcion/por-cliente/{UserName}");
    }
    async Task AnularSuscripcion(int idSuscripcion)
    {
        var solicitudSeleccionada = response.Suscripciones.First(x => x.Id == idSuscripcion);
        string mensajeConfirmacion = $"¿Anular la solicitud de pago numero {solicitudSeleccionada.Id}?";
        if (await JS.InvokeAsync<bool>("confirm", mensajeConfirmacion))
        {
            await Http.DeleteAsync($"suscripcion/{idSuscripcion}");
            await CargarSuscripciones();
        }
    }
    private async Task BloqueoUsuario(bool active)
    {
        var requestBloqueo = new RequestEstadoUsuario() { UserId = response.User.Id, Active = active };
        var usuarioActual = response.User.Email;
        string mensaje = $"¿Está seguro que desea bloquear al usuario: {usuarioActual}?";
        if (await JS.InvokeAsync<bool>("confirm", mensaje))
        {
            await Http.PostAsJsonAsync($"User/estado", requestBloqueo);
            await CargarSuscripciones();
        }
    }
    private async Task VerificarPago(Suscripcion suscripcion)
    {
        var usuarioActual = response.User.Email;
        string mensaje = $"¿Confirma verificar el pago del usuario {usuarioActual}?";
        if (await JS.InvokeAsync<bool>("confirm", mensaje))
        {
            await Http.PutAsJsonAsync($"Suscripcion", suscripcion);
            await CargarSuscripciones();
        }
    }
    private async Task PagoAnual(string userid)
    {
        RequestUserId request = new RequestUserId() { UserId = userid };
        string mensaje = $"¿Confirma generar una solicitud de pago anual para el usuario {response.User.Email}?";
        if (await JS.InvokeAsync<bool>("confirm", mensaje))
        {
            await Http.PostAsJsonAsync($"Suscripcion/anual", request);
            await CargarSuscripciones();
        }
    }
}